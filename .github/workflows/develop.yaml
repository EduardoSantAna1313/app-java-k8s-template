name: 'Develop'

on:
  push:
    branches: [ "develop" ]
  pull_request:

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

env:
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ASSUME_ROLE: ${{ vars.AWS_ASSUME_ROLE }}
  REPOSITORY_NAME: ${{ github.event.repository.name }}
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
  ENVIRONMENT: "dev"

jobs:
  # Build the code
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        id: maven-build
        working-directory: app
        run: |
          mvn -B package --file pom.xml

      - run: |
          mkdir artifacts
          cp app/target/*.jar artifacts/app.jar

      - name: Uploading artifacts
        uses: actions/upload-artifact@master
        with:
          name: app.jar
          path: artifacts

  # Docker build
  build-image:
    runs-on: ubuntu-latest
    needs: build
    env:
      IMAGE_TAG: latest-${{ github.sha }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@master
        with:
          name: app.jar
          path: artifacts

      - name: Copy artifact
        run: cp artifacts/app.jar app/app.jar

      - name: Build the Docker image
        working-directory: app
        run: docker build . --file Dockerfile -t $REPOSITORY_NAME

      # Configure aws credentials with assumerole
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github_actions_oidc_role

      - name: Docker login ECR
        run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Push Docker Image ECR
        id: push-image
        working-directory: app
        run: |
          docker tag $REPOSITORY_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME:$IMAGE_TAG
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME:$IMAGE_TAG
          echo "image_name=$REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

    outputs:
      image_name: ${{ steps.push-image.outputs.image_name }}

  # SCAN with Acqua/trivy
  scan-image:
    runs-on: ubuntu-latest
    needs: build-image
    env:
      IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}

    steps:
      - uses: actions/checkout@v3

      # Configure aws credentials with assumerole
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github_actions_oidc_role

      - name: Docker login ECR
        run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Describe image name
        run: |
          echo AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME
          echo ${{ needs.build-image.outputs.lambda_name }}
          echo "All outputs"
          echo ${{ needs.build-image.outputs }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}
          format: 'table'
          vuln-type: 'os,library'

  deploy-k8s:
    runs-on: ubuntu-latest
    needs: build-image
    env:
      IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
    steps:
      - uses: actions/checkout@v3

      # Configure aws credentials with assumerole
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github_actions_oidc_role

      #- name: Docker login ECR
      #  run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      # Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
        shell: bash

      - name: Configure kubectl
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

        env:
          KUBECONFIG: $HOME/.kube/config

      - name: Configura manifest
        working-directory: infra
        run: |
          cd $ENVIRONMENT
          FULL_IMAGE_NAME="image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}"
          TARGET_TEXT="image: IMG"
          REPLACEMENT_TEXT=$(sed 's/[&/\]/\\&/g' <<< "$FULL_IMAGE_NAME")
          sed -i "s/$TARGET_TEXT/$REPLACEMENT_TEXT/g" kubernetes.yaml

      - name: Deploy Kubernetes
        working-directory: infra
        run: |
          echo "Running config view"
          kubectl config view --minify
          echo "Listing cluster info"
          kubectl cluster-info
          cd $ENVIRONMENT
          echo "Applying..."
          kubectl apply -f .
