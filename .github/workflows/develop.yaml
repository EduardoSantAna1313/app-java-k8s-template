name: 'Develop'

on:
  push:
    branches: [ "develop", "main" ]
  pull_request:

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

env:
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ASSUME_ROLE: ${{ vars.AWS_ASSUME_ROLE }}
  REPOSITORY_NAME: ${{ github.event.repository.name }}
  BUCKET_CODE: ${{ vars.BUCKET_CODE }}
  ENVIRONMENT: "dev"

jobs:
  # Build the code
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      id: maven-build
      working-directory: app
      run: |
        mvn -B package --file pom.xml

    - run: |
        echo "Current folder"
        pwd
        echo "Listing files"
        ls
        echo "Creating folder artifacts"
        mkdir artifacts
        echo "Copying jar"
        cp app/target/*.jar artifacts/app.jar
        echo "Listing files"
        ls artifacts

    - name: Uploading artifacts
      uses: actions/upload-artifact@master
      with:
        name: app.jar
        path: artifacts

  build-image:
    runs-on: ubuntu-latest
    needs: build
    env:
      IMAGE_TAG: latest-${{ github.sha }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@master
        with:
          name: app.jar
          path: artifacts

      - name: Copy artifact
        run: cp artifacts/app.jar app/app.jar

      - name: Build the Docker image
        working-directory: app
        run: docker build . --file Dockerfile -t $REPOSITORY_NAME

      # Configure aws credentials with assumerole
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github_actions_oidc_role

      - name: Docker login ECR
        run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Push Docker Image ECR
        id: push-image
        working-directory: app
        run: |
          docker tag app-java-k8s-template:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME:$IMAGE_TAG
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME:$IMAGE_TAG
          echo "lambda_name=$REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

    outputs:
      docker_image: ${{ steps.push-image.outputs.lambda_name }}

  scan-image:
    runs-on: ubuntu-latest
    needs: build-image
    env:
      IMAGE_NAME: ${{ needs.build-image.outputs.lambda_name }}

    steps:
      - uses: actions/checkout@v3

      # Configure aws credentials with assumerole
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github_actions_oidc_role

      - name: Docker login ECR
        run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Describe image name
        run: |
          echo AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME
          echo ${{ needs.build-image.outputs.lambda_name }}
          echo "All outputs"
          echo ${{ needs.build-image.outputs }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${{ needs.build-image.outputs.image_name }}
          format: 'table'
          vuln-type: 'os,library'

  scan-image2:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: app-java-k8s-template:sha256:${{ github.sha }}

    steps:
      - uses: actions/checkout@v3

      # Configure aws credentials with assumerole
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github_actions_oidc_role

      #- name: Docker login ECR
      #  run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 329158668427.dkr.ecr.sa-east-1.amazonaws.com/app-java-k8s-template:latest-2dcc26a4987c1a9aae1b35f32265ce119c886f45
          format: 'table'
          vuln-type: 'os,library'

  #deploy-k8s:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v3
  #
  #    # Configure aws credentials with assumerole
  #    - name: Configure AWS Credentials
  #      uses: aws-actions/configure-aws-credentials@v3
  #      with:
  #        role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
  #        aws-region: ${{ env.AWS_REGION }}
  #        role-session-name: github_actions_oidc_role
  #
  #   - name: Deploy Kubernetes
  #      working-directory: infra
  #      run: kubectl apply -f .